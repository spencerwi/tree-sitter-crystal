====================
index element access
====================

foo["one"]
foo[CONST]
@foo[1]
@@foo[:my_symbol]
FOO[foo[1]] 

---
(program
  (index_expression target: (local_variable) key: (string))
  (index_expression target: (local_variable) key: (constant))
  (index_expression target: (instance_variable) key: (integer))
  (index_expression target: (class_variable) key: (symbol))
  (index_expression target: (constant) key: (index_expression target: (local_variable) key: (integer)))
)

==========
assignment
==========

foo = 1
@foo = "test"
@@foo = [1, 2, 3]
PI = 3.14
foo = bar = 4
foo[:test] = "test"

---
(program
  (assignment lhs: (local_variable) rhs: (integer))
  (assignment lhs: (instance_variable) rhs: (string))
  (assignment lhs: (class_variable) rhs: (array (integer) (integer) (integer)))
  (assignment lhs: (constant) rhs: (float))
  (assignment lhs: (local_variable) rhs: (assignment lhs: (local_variable) rhs: (integer)))
  (assignment lhs: (index_expression target: (local_variable) key: (symbol)) rhs: (string))
)

================
class definition
================

class Foo 
end

class MyMath 
  PI = 3.14
end

class SubFoo < Foo
  @@thing = :yes
end

class MyList(T) < Foo
  @name = "yes"
end

---

(program
  (class_definition name: (constant))
  (class_definition name: (constant)
    (assignment lhs: (constant) rhs: (float))
  )
  (class_definition name: (constant) superclass: (constant)
    (assignment lhs: (class_variable) rhs: (symbol))
  )
  (class_definition name: (constant) generic_param: (constant) superclass: (constant)
    (assignment lhs: (instance_variable) rhs: (string))
  )
)