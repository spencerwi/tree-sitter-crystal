====================
index element access
====================

foo["one"]
foo[CONST]
@foo[1]
@@foo[:my_symbol]
FOO[foo[1]] 

---
(program
  (index_expression target: (local_variable) key: (string))
  (index_expression target: (local_variable) key: (constant))
  (index_expression target: (instance_variable) key: (integer))
  (index_expression target: (class_variable) key: (symbol))
  (index_expression target: (constant) key: (index_expression target: (local_variable) key: (integer)))
)

==========
assignment
==========

foo = 1
@foo = "test"
@@foo = [1, 2, 3]
PI = 3.14
foo = bar = 4
foo[:test] = foo[:otherTest]

---
(program
  (assignment lhs: (local_variable) rhs: (integer))
  (assignment lhs: (instance_variable) rhs: (string))
  (assignment lhs: (class_variable) rhs: (array (integer) (integer) (integer)))
  (assignment lhs: (constant) rhs: (float))
  (assignment lhs: (local_variable) rhs: (assignment lhs: (local_variable) rhs: (integer)))
  (assignment 
    lhs: (index_expression target: (local_variable) key: (symbol)) 
    rhs: (index_expression target: (local_variable) key: (symbol)))
)

=================
method definition
=================

def do_it
  @message = "don't let your dreams be dreams!"
end

def do_it_again()
  @done = true
end

def set_message(message)
  @message = message
end

---

(program
  (method_definition name: (identifier) 
    (assignment lhs: (instance_variable) rhs: (string))
  )
  (method_definition name: (identifier) 
    (assignment lhs: (instance_variable) rhs: (bool))
  )
  (method_definition name: (identifier) param: (identifier)
    (assignment lhs: (instance_variable) rhs: (local_variable))
  )
)

================
class definition
================

class Foo 
end

class MyMath 
  PI = 3.14
end

class SubFoo < Foo
  @@thing = :yes
end

class MyList(T) < Foo
  @name = "yes"
end

class MyHash(A, B) < Bar
  local_var = 44
end

class MyList(T) < Foo
  def initialize(base)
    @contents = base
  end
end

---

(program
  (class_definition name: (type))
  (class_definition name: (type)
    (assignment lhs: (constant) rhs: (float))
  )
  (class_definition name: (type) superclass: (type)
    (assignment lhs: (class_variable) rhs: (symbol))
  )
  (class_definition name: (type generic_param: (type)) superclass: (type)
    (assignment lhs: (instance_variable) rhs: (string))
  )
  (class_definition name: (type generic_param: (type) generic_param: (type)) superclass: (type)
    (assignment lhs: (local_variable) rhs: (integer))
  )
  (class_definition name: (type generic_param: (type)) superclass: (type)
    (method_definition name: (identifier) param: (identifier)
      (assignment lhs: (instance_variable) rhs: (local_variable))
    )
  )
)

=================
module definition
==================

module A 
end

module B 
  class MyB 
    def initialize(b)
      @b = b
    end
  end
end

---

(program
  (module_definition name: (type))
  (module_definition name: (type)
    (class_definition name: (type)
      (method_definition name: (identifier) param: (identifier)
        (assignment lhs: (instance_variable) rhs: (local_variable))
      )
    )
  )
)